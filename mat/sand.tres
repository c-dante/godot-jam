[gd_resource type="ShaderMaterial" load_steps=8 format=2]

[sub_resource type="VisualShaderNodeColorUniform" id=1]
uniform_name = "Color"

[sub_resource type="OpenSimplexNoise" id=2]

[sub_resource type="NoiseTexture" id=3]
noise = SubResource( 2 )

[sub_resource type="VisualShaderNodeTexture" id=4]
texture = SubResource( 3 )

[sub_resource type="VisualShaderNodeInput" id=5]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorOp" id=6]
operator = 2

[sub_resource type="VisualShader" id=7]
code = "shader_type spatial;
uniform vec4 Color : hint_color;
uniform sampler2D tex_frg_3;



void vertex() {
// Output:0

}

void fragment() {
// ColorUniform:2
	vec3 n_out2p0 = Color.rgb;
	float n_out2p1 = Color.a;

// Input:4
	vec3 n_out4p0 = vec3(UV, 0.0);

// Texture:3
	vec4 tex_frg_3_read = texture(tex_frg_3, n_out4p0.xy);
	vec3 n_out3p0 = tex_frg_3_read.rgb;
	float n_out3p1 = tex_frg_3_read.a;

// VectorOp:5
	vec3 n_out5p0 = n_out2p0 * n_out3p0;

// Output:0
	ALBEDO = n_out5p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -851, -6 )
nodes/fragment/0/position = Vector2( 160, 160 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( -340, 160 )
nodes/fragment/3/node = SubResource( 4 )
nodes/fragment/3/position = Vector2( -435, 310 )
nodes/fragment/4/node = SubResource( 5 )
nodes/fragment/4/position = Vector2( -640, 320 )
nodes/fragment/5/node = SubResource( 6 )
nodes/fragment/5/position = Vector2( -93, 314 )
nodes/fragment/connections = PoolIntArray( 4, 0, 3, 0, 2, 0, 5, 0, 3, 0, 5, 1, 5, 0, 0, 0 )

[resource]
shader = SubResource( 7 )
shader_param/Color = Color( 0.952941, 0.835294, 0.486275, 1 )
